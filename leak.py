import asyncio
import logging
import sqlite3
import json
from datetime import datetime
from collections import defaultdict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
BOT_TOKEN = "8468761099:AAEPMmi9gYqAYZCy4He1lY0hGULa1sNV5_M"
ADMIN_USER_IDS = [1929149706]
PRICE_PER_COMPLAINT = 250
DATABASE_NAME = "neterror_bot.db"

# ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –ì–†–£–ü–ü –§–û–¢–û ====================
media_groups = defaultdict(list)
processing_groups = set()

# –î–æ–±–∞–≤—å—Ç–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –Ω–∞—á–∞–ª–æ
user_media_groups = defaultdict(list)
user_media_timers = {}

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
def init_database():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        balance INTEGER DEFAULT 0,
        total_complaints INTEGER DEFAULT 0,
        successful_complaints INTEGER DEFAULT 0,
        joined_date TEXT
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS orders (
        order_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        target_username TEXT,
        target_id TEXT,
        problem_description TEXT,
        status TEXT DEFAULT 'pending',
        created_date TEXT,
        admin_id INTEGER,
        screenshots TEXT
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS payment_keys (
        key TEXT PRIMARY KEY,
        amount INTEGER,
        used BOOLEAN DEFAULT FALSE,
        created_by INTEGER
    )
    ''')

    conn.commit()
    conn.close()


def get_user(user_id):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()

    if user:
        return {
            'user_id': user[0],
            'username': user[1],
            'balance': user[2],
            'total_complaints': user[3],
            'successful_complaints': user[4],
            'joined_date': user[5]
        }
    return None


def create_user(user_id, username):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('''
    INSERT OR IGNORE INTO users (user_id, username, joined_date) 
    VALUES (?, ?, ?)
    ''', (user_id, username, datetime.now().strftime("%d.%m.%Y")))
    conn.commit()
    conn.close()


def update_user_balance(user_id, amount):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
    conn.commit()
    conn.close()


def add_order(user_id, target_username, target_id, problem_description, screenshots):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('''
    INSERT INTO orders (user_id, target_username, target_id, problem_description, created_date, screenshots)
    VALUES (?, ?, ?, ?, ?, ?)
    ''', (
    user_id, target_username, target_id, problem_description, datetime.now().strftime("%d.%m.%Y %H:%M"), screenshots))
    order_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return order_id


def update_order_status(order_id, status, admin_id):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('UPDATE orders SET status = ?, admin_id = ? WHERE order_id = ?', (status, admin_id, order_id))

    cursor.execute('SELECT user_id FROM orders WHERE order_id = ?', (order_id,))
    result = cursor.fetchone()
    if result:
        user_id = result[0]
        if status == 'completed':
            cursor.execute(
                'UPDATE users SET total_complaints = total_complaints + 1, successful_complaints = successful_complaints + 1 WHERE user_id = ?',
                (user_id,))
        elif status == 'rejected':
            cursor.execute('UPDATE users SET total_complaints = total_complaints + 1 WHERE user_id = ?', (user_id,))

    conn.commit()
    conn.close()


def get_order(order_id):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM orders WHERE order_id = ?', (order_id,))
    order = cursor.fetchone()
    conn.close()

    if order:
        return {
            'order_id': order[0],
            'user_id': order[1],
            'target_username': order[2],
            'target_id': order[3],
            'problem_description': order[4],
            'status': order[5],
            'created_date': order[6],
            'admin_id': order[7],
            'screenshots': order[8]
        }
    return None


# ==================== –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ====================
user_states = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id

    create_user(user_id, user.username)
    user_data = get_user(user_id)

    keyboard = [
        [InlineKeyboardButton("üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup"),
         InlineKeyboardButton("üéØ –ó–∞–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—à–∫—É —Ñ—Ä–∏", callback_data="send_complaint")],
        [InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="balance"),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
    ]

    if user_id in ADMIN_USER_IDS:
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(
            f"üî• Aegis French Fries –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç!\n\n"
            f"‚≠ê –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']} –∑–≤–µ–∑–¥\n"
            f"üéØ –¶–µ–Ω–∞ –∑–∞ 1 –¥–æ—Å—Ç–∞–≤–∫—É –∫–∞—Ä—Ç–æ—à–∫–∏ —Ñ—Ä–∏: {PRICE_PER_COMPLAINT} –∑–≤–µ–∑–¥\n",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(

            reply_markup=reply_markup
        )


async def start_from_query(query):
    user = query.from_user
    user_id = user.id

    create_user(user_id, user.username)
    user_data = get_user(user_id)

    keyboard = [
        [InlineKeyboardButton("üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup"),
         InlineKeyboardButton("üéØ –ó–∞–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—à–∫—É —Ñ—Ä–∏", callback_data="send_complaint")],
        [InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="balance"),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
    ]

    if user_id in ADMIN_USER_IDS:
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –î–û–ë–ê–í–¨ –≠–¢–û–¢ –¢–ï–ö–°–¢:
    await query.edit_message_text(
        f"üî• Aegis French Fries –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç!\n\n"
        f"‚≠ê –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']} –∑–≤–µ–∑–¥\n"
        f"üéØ –¶–µ–Ω–∞ –∑–∞ 1 –¥–æ—Å—Ç–∞–≤–∫—É –∫–∞—Ä—Ç–æ—à–∫–∏ —Ñ—Ä–∏: {PRICE_PER_COMPLAINT} –∑–≤–µ–∑–¥\n",
        reply_markup=reply_markup
    )


def get_payment_keys_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—é—á–∞–º"""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    cursor.execute('SELECT COUNT(*) FROM payment_keys WHERE used = FALSE')
    active_keys = cursor.fetchone()[0]

    cursor.execute('SELECT COUNT(*) FROM payment_keys WHERE used = TRUE')
    used_keys = cursor.fetchone()[0]

    cursor.execute('SELECT COUNT(*) FROM payment_keys')
    total_keys = cursor.fetchone()[0]

    cursor.execute('SELECT SUM(amount) FROM payment_keys WHERE used = FALSE')
    total_amount = cursor.fetchone()[0] or 0

    conn.close()

    return {
        'active': active_keys,
        'used': used_keys,
        'total': total_keys,
        'total_amount': total_amount
    }


async def handle_send_complaint(query):
    user_id = query.from_user.id
    user_data = get_user(user_id)

    if user_data['balance'] < PRICE_PER_COMPLAINT:
        keyboard = [
            [InlineKeyboardButton("üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥!\n\n"
            f"‚≠ê –¢—Ä–µ–±—É–µ—Ç—Å—è: {PRICE_PER_COMPLAINT} –∑–≤–µ–∑–¥\n"
            f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']} –∑–≤–µ–∑–¥\n\n"
            f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—à–∫–∏ —Ñ—Ä–∏",
            reply_markup=reply_markup
        )
        return

    user_states[user_id] = {'step': 'waiting_target'}

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üéØ –ó–∞–∫–∞–∑ –∫–∞—Ä—Ç–æ—à–∫–∏ —Ñ—Ä–∏\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—à–∫—É —Ñ—Ä–∏:\n\n"
        "üìù –ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ @username - –¥–ª—è —é–∑–µ—Ä–Ω–µ–π–º–∞\n"
        "‚Ä¢ 123456789 - –¥–ª—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è",
        reply_markup=reply_markup
    )


async def handle_target_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in user_states or user_states[user_id]['step'] != 'waiting_target':
        return

    target_input = update.message.text.strip()
    user_states[user_id] = {
        'step': 'waiting_description',
        'target': target_input
    }

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="send_complaint")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n\n"
        "–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ–±–ª–µ–º—É –∏ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:\n\n"
        "üí¨ –ü—Ä–∏–º–µ—Ä: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ–º, –æ–±–º–∞–Ω—ã–≤–∞–µ—Ç –ª—é–¥–µ–π'\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑' —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è",
        reply_markup=reply_markup
    )



async def handle_description_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in user_states or user_states[user_id]['step'] != 'waiting_description':
        return

    description = update.message.text
    user_states[user_id] = {
        'step': 'waiting_screenshots',
        'target': user_states[user_id]['target'],
        'description': description
    }

    keyboard = [
        [InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_screenshots")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é", callback_data="back_to_description")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üì∏ –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏):\n\n"
        "üìé –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ\n"
        "‚è© –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ\n"
        "‚¨ÖÔ∏è –ò–ª–∏ '–ù–∞–∑–∞–¥' —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",
        reply_markup=reply_markup
    )


async def process_media_group(media_group_id, user_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    if media_group_id not in media_groups:
        return None

    group_items = media_groups[media_group_id]

    # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –ø–æ file_unique_id (–±–µ—Ä–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã)
    unique_photos = {}
    for item in group_items:
        photo = item['photo']
        if photo.file_unique_id not in unique_photos:
            unique_photos[photo.file_unique_id] = photo
        else:
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ñ–æ—Ç–æ –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º
            if photo.file_size > unique_photos[photo.file_unique_id].file_size:
                unique_photos[photo.file_unique_id] = photo

    screenshot_ids = [photo.file_id for photo in unique_photos.values()]

    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ —Ñ–æ—Ç–æ: {len(group_items)} —Å–æ–æ–±—â–µ–Ω–∏–π -> {len(screenshot_ids)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

    # –û—á–∏—â–∞–µ–º –≥—Ä—É–ø–ø—É
    del media_groups[media_group_id]
    processing_groups.discard(media_group_id)

    return screenshot_ids


async def handle_screenshots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in user_states or user_states[user_id]['step'] != 'waiting_screenshots':
        return

    if update.message.photo:
        # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        highest_quality_photo = update.message.photo[-1]

        # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ –º–µ–¥–∏–∞
        if update.message.media_group_id:
            media_group_id = update.message.media_group_id

            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_media_groups[user_id].append({
                'photo': highest_quality_photo,
                'media_group_id': media_group_id,
                'timestamp': datetime.now()
            })

            print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –í—Å–µ–≥–æ: {len(user_media_groups[user_id])}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø—ã
            if user_id in user_media_timers:
                user_media_timers[user_id].cancel()

            # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø–µ
            user_media_timers[user_id] = asyncio.create_task(
                process_user_media_group(user_id, update, context)
            )

        else:
            # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
            screenshot_ids = [highest_quality_photo.file_id]
            user_states[user_id]['screenshots'] = json.dumps(screenshot_ids)

            print(f"–û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

            # –û—á–∏—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≥—Ä—É–ø–ø—ã
            if user_id in user_media_groups:
                del user_media_groups[user_id]
            if user_id in user_media_timers:
                user_media_timers[user_id].cancel()
                del user_media_timers[user_id]

            await create_complaint_order(update, context, user_id)
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")


async def process_user_media_group(user_id, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏"""
    try:
        # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ –≥—Ä—É–ø–ø—ã
        await asyncio.sleep(3)

        if user_id not in user_media_groups or not user_media_groups[user_id]:
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_photos = user_media_groups[user_id]

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ media_group_id (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø)
        groups = defaultdict(list)
        for photo_data in user_photos:
            groups[photo_data['media_group_id']].append(photo_data)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
        all_screenshot_ids = []
        for media_group_id, group_photos in groups.items():
            # –ë–µ—Ä–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –∏–∑ –≥—Ä—É–ø–ø—ã
            unique_photos = {}
            for photo_data in group_photos:
                photo = photo_data['photo']
                if photo.file_unique_id not in unique_photos:
                    unique_photos[photo.file_unique_id] = photo
                else:
                    # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                    if photo.file_size > unique_photos[photo.file_unique_id].file_size:
                        unique_photos[photo.file_unique_id] = photo

            # –î–æ–±–∞–≤–ª—è–µ–º file_id —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ
            for photo in unique_photos.values():
                all_screenshot_ids.append(photo.file_id)

        print(
            f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(user_photos)} —Ñ–æ—Ç–æ -> {len(all_screenshot_ids)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á)
        user_states[user_id]['screenshots'] = json.dumps(all_screenshot_ids)  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û

        # –û—á–∏—â–∞–µ–º –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_media_groups:
            del user_media_groups[user_id]
        if user_id in user_media_timers:
            del user_media_timers[user_id]

        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        await create_complaint_order(update, context, user_id)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø—ã —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def handle_skip_screenshots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in user_states or user_states[user_id]['step'] != 'waiting_screenshots':
        return

    user_states[user_id]['screenshots'] = json.dumps([])
    await create_complaint_order(update, context, user_id)


async def create_complaint_order(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    user_data = get_user(user_id)

    if user_data['balance'] < PRICE_PER_COMPLAINT:
        await update.message.reply_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥!\n\n"
            f"‚≠ê –¢—Ä–µ–±—É–µ—Ç—Å—è: {PRICE_PER_COMPLAINT} –∑–≤–µ–∑–¥\n"
            f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']} –∑–≤–µ–∑–¥"
        )
        if user_id in user_states:
            del user_states[user_id]
        return

    target = user_states[user_id]['target']
    description = user_states[user_id]['description']
    screenshots = user_states[user_id]['screenshots']

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ü–µ–ª–∏
    target_type = "username" if target.startswith('@') else "id"
    target_value = target.replace('@', '')

    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    order_id = add_order(user_id, target_value if target_type == "username" else None,
                         target_value if target_type == "id" else None, description, screenshots)

    # –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã
    update_user_balance(user_id, -PRICE_PER_COMPLAINT)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMIN_USER_IDS:
        try:
            keyboard = [
                [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª", callback_data=f"complete_{order_id}"),
                 InlineKeyboardButton("‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–∏–ª", callback_data=f"reject_{order_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            message_text = (
                f"üÜï –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{order_id}\n\n"
                f"üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{update.effective_user.username or '–ù–µ—Ç username'} ({user_id})\n"
                f"üéØ –¶–µ–ª—å: {target}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {description}\n"
                f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                f"‚≠ê –°—Ç–æ–∏–º–æ—Å—Ç—å: {PRICE_PER_COMPLAINT} –∑–≤–µ–∑–¥"
            )

            await context.bot.send_message(
                chat_id=admin_id,
                text=message_text,
                reply_markup=reply_markup
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            screenshots_list = json.loads(screenshots)
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É {admin_id}: {len(screenshots_list)} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")

            if screenshots_list:
                for i, screenshot_id in enumerate(screenshots_list):
                    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ {i + 1}")
                    await context.bot.send_photo(admin_id, screenshot_id)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_balance = get_user(user_id)['balance']
    await update.message.reply_text(
        f"‚úÖ –ö–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏ –∑–∞–∫–∞–∑–∞–Ω–∞! (#{order_id})\n\n"
        f"üéØ –¶–µ–ª—å: {target}\n"
        f"üìù –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º\n"
        f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n"
        f"‚≠ê –°–ø–∏—Å–∞–Ω–æ: {PRICE_PER_COMPLAINT} –∑–≤–µ–∑–¥\n"
        f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_balance} –∑–≤–µ–∑–¥"
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_states:
        del user_states[user_id]


async def handle_order_complete(query, order_id, context: ContextTypes.DEFAULT_TYPE):
    order = get_order(order_id)
    if not order:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    update_order_status(order_id, 'completed', query.from_user.id)

    try:
        safe_target = order['target_username'] or order['target_id']
        safe_admin = query.from_user.username or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"

        await context.bot.send_message(  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: context.bot –≤–º–µ—Å—Ç–æ query.bot
            chat_id=order['user_id'],
            text=f"‚úÖ –ó–ê–Ø–í–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê (#{order_id})\n\n"
                 f"üéØ –¶–µ–ª—å: {safe_target}\n"
                 f"üìù –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–π—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
                 f"üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{safe_admin}"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    await query.edit_message_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ #{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω"
    )


async def handle_order_reject(query, order_id, context: ContextTypes.DEFAULT_TYPE):
    order = get_order(order_id)
    if not order:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    update_order_status(order_id, 'rejected', query.from_user.id)
    update_user_balance(order['user_id'], PRICE_PER_COMPLAINT)

    try:
        safe_target = order['target_username'] or order['target_id']
        safe_admin = query.from_user.username or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"

        await context.bot.send_message(  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: context.bot –≤–º–µ—Å—Ç–æ query.bot
            chat_id=order['user_id'],
            text=f"‚ùå –ó–ê–Ø–í–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê (#{order_id})\n\n"
                 f"üéØ –¶–µ–ª—å: {safe_target}\n"
                 f"üìù –ü—Ä–∏—á–∏–Ω–∞: –ê–∫–∫–∞—É–Ω—Ç —Å–Ω–µ—Å—Ç–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å\n"
                 f"üíé –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: {PRICE_PER_COMPLAINT} –∑–≤–µ–∑–¥\n"
                 f"üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{safe_admin}"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    await query.edit_message_text(
        f"‚ùå –ó–∞—è–≤–∫–∞ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∑–≤–µ–∑–¥—ã"
    )


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ====================
def generate_payment_key(amount, admin_id):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    import random
    import string

    key = f"AEGIS-{''.join(random.choices(string.ascii_uppercase + string.digits, k=12))}"

    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO payment_keys (key, amount, created_by) VALUES (?, ?, ?)',
                   (key, amount, admin_id))
    conn.commit()
    conn.close()
    return key


def activate_payment_key(key, user_id):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞"""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM payment_keys WHERE key = ? AND used = FALSE', (key,))
    key_data = cursor.fetchone()

    if key_data:
        amount = key_data[1]
        cursor.execute('UPDATE payment_keys SET used = TRUE WHERE key = ?', (key,))
        cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
        conn.commit()
        conn.close()
        return amount
    else:
        conn.close()
        return None


async def handle_key_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–ª—é—á–∞"""
    user_id = update.effective_user.id

    if user_id not in user_states or user_states[user_id]['step'] != 'waiting_key':
        return

    key = update.message.text.strip().upper()
    amount = activate_payment_key(key, user_id)

    if amount:
        user_data = get_user(user_id)
        await update.message.reply_text(
            f"‚úÖ –ö–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"üíé –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {amount} –∑–≤–µ–∑–¥\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_data['balance']} –∑–≤–µ–∑–¥"
        )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á!\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if user_id in user_states:
        del user_states[user_id]


async def handle_admin_panel(query):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    user_id = query.from_user.id

    if user_id not in ADMIN_USER_IDS:
        await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    keys_stats = get_payment_keys_stats()

    keyboard = [
        [InlineKeyboardButton("üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á", callback_data="generate_key")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π", callback_data="list_keys")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data="bot_stats")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n"
        f"üîë –ö–ª—é—á–∏:\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {keys_stats['active']}\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {keys_stats['used']}\n"
        f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {keys_stats['total_amount']} –∑–≤–µ–∑–¥\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


async def handle_list_keys(query):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π"""
    user_id = query.from_user.id

    if user_id not in ADMIN_USER_IDS:
        await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏
    cursor.execute('SELECT key, amount FROM payment_keys WHERE used = FALSE ORDER BY rowid DESC LIMIT 10')
    active_keys = cursor.fetchall()

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏
    cursor.execute('SELECT key, amount FROM payment_keys WHERE used = TRUE ORDER BY rowid DESC LIMIT 10')
    used_keys = cursor.fetchall()

    conn.close()

    text = "üîë –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏:\n"
    if active_keys:
        for key, amount in active_keys:
            text += f"‚Ä¢ {key} - {amount} –∑–≤–µ–∑–¥\n"
    else:
        text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π\n"

    text += "\nüìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏:\n"
    if used_keys:
        for key, amount in used_keys:
            text += f"‚Ä¢ {key} - {amount} –∑–≤–µ–∑–¥\n"
    else:
        text += "–ù–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π\n"

    keyboard = [
        [InlineKeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text, reply_markup=reply_markup)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    print(f"DEBUG: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {data}")  # ‚Üê –î–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É


    if data == "topup":
        print("DEBUG: –ü–µ—Ä–µ—Ö–æ–¥ –≤ topup")
        await handle_topup(query)
    elif data == "activate_key":
        await handle_activate_key(query)
    elif data == "send_complaint":
        await handle_send_complaint(query)
    elif data == "balance":
        await handle_balance(query)
    elif data == "stats":
        await handle_stats(query)
    elif data == "admin_panel":
        await handle_admin_panel(query)
    elif data == "back_to_main":
        print("DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é back_to_main")
        await start_from_query(query)
    elif data == "back_to_description":
        await handle_back_to_description(query)
    elif data == "skip_screenshots":
        user_id = query.from_user.id
        user_states[user_id]['screenshots'] = json.dumps([])
    elif data == "generate_key":
        await handle_generate_key(query)
    elif data == "bot_stats":
        await handle_bot_stats(query)
    elif data.startswith("complete_"):
        order_id = int(data.replace("complete_", ""))
        await handle_order_complete(query, order_id, context)
    elif data.startswith("reject_"):
        order_id = int(data.replace("reject_", ""))
        await handle_order_reject(query, order_id, context)
    elif data == "list_keys":
        await handle_list_keys(query)
    else:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")


async def handle_generate_key(query):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    user_id = query.from_user.id

    if user_id not in ADMIN_USER_IDS:
        await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã
    user_states[user_id] = {'step': 'waiting_key_amount'}

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (—á–∏—Å–ª–æ):\n\n",
        reply_markup=reply_markup
    )


async def handle_bot_stats(query):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    user_id = query.from_user.id

    if user_id not in ADMIN_USER_IDS:
        await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('SELECT COUNT(*) FROM users')
    total_users = cursor.fetchone()[0]

    cursor.execute('SELECT SUM(balance) FROM users')
    total_balance = cursor.fetchone()[0] or 0

    cursor.execute('SELECT COUNT(*) FROM orders')
    total_orders = cursor.fetchone()[0]

    cursor.execute('SELECT COUNT(*) FROM orders WHERE status = "completed"')
    completed_orders = cursor.fetchone()[0]

    cursor.execute('SELECT COUNT(*) FROM orders WHERE status = "pending"')
    pending_orders = cursor.fetchone()[0]

    conn.close()

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üíé –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance} –∑–≤–µ–∑–¥\n"
        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_orders}\n"
        f"‚è≥ –û–∂–∏–¥–∞—é—Ç: {pending_orders}",
        reply_markup=reply_markup
    )


async def handle_balance(query):
    """–ü–æ–∫–∞–∑ –±–∞–ª–∞–Ω—Å–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    user_id = query.from_user.id
    user_data = get_user(user_id)

    keyboard = [
        [InlineKeyboardButton("üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']} –∑–≤–µ–∑–¥\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {user_data['total_complaints']}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {user_data['successful_complaints']}",
        reply_markup=reply_markup
    )

async def handle_stats(query):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    user_id = query.from_user.id
    user_data = get_user(user_id)

    success_rate = (user_data['successful_complaints'] / user_data['total_complaints'] * 100) if user_data[
                                                                                                     'total_complaints'] > 0 else 0

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        f"üéØ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {user_data['total_complaints']}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {user_data['successful_complaints']}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data['joined_date']}",
        reply_markup=reply_markup
    )

async def handle_back_to_description(query):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –æ–ø–∏—Å–∞–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã"""
    user_id = query.from_user.id
    user_states[user_id] = {
        'step': 'waiting_description',
        'target': user_states[user_id]['target']  # –°–æ—Ö—Ä–∞–Ω—è–µ–º target
    }

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="send_complaint")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n\n"
        "–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ–±–ª–µ–º—É –∏ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:\n\n"
        "üí¨ –ü—Ä–∏–º–µ—Ä: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ–º, –æ–±–º–∞–Ω—ã–≤–∞–µ—Ç –ª—é–¥–µ–π'\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑' —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è",
        reply_markup=reply_markup
    )


async def handle_topup(query):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    keyboard = [
        [InlineKeyboardButton("üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á", callback_data="activate_key")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üíé –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n"
        "üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á - –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞\n\n"
        "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–ª—é—á–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ @aegis_def",
        reply_markup=reply_markup
    )


async def handle_activate_key(query):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞"""
    user_id = query.from_user.id
    user_states[user_id] = {'step': 'waiting_key'}

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="topup")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üîë –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:\n\n"
        "üìù –ü—Ä–∏–º–µ—Ä: AEGIS-XXXX-XXXX-XXXX\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è",
        reply_markup=reply_markup
    )


async def handle_key_amount_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞"""
    user_id = update.effective_user.id

    if user_id not in user_states or user_states[user_id]['step'] != 'waiting_key_amount':
        return

    try:
        amount = int(update.message.text.strip())

        if amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return

        if amount > 100000:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
            await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—É–º–º–∞! –ú–∞–∫—Å–∏–º—É–º 100,000 –∑–≤–µ–∑–¥")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á
        key = generate_payment_key(amount, user_id)

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        keyboard = [
            [InlineKeyboardButton("üîë –°–æ–∑–¥–∞—Ç—å –µ—â–µ –∫–ª—é—á", callback_data="generate_key")],
            [InlineKeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø—É—Å—Ç—å –∞–¥–º–∏–Ω –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
        # del user_states[user_id]  # ‚Üê –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–£–ô –≠–¢–£ –°–¢–†–û–ö–£

        await update.message.reply_text(
            f"üîë –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üíé –°—É–º–º–∞: {amount} –∑–≤–µ–∑–¥\n"
            f"üîë –ö–ª—é—á: `{key}`\n\n",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞: {e}")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {user_states.get(user_id, '–Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è')}")  # ‚Üê –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£

    if user_id in user_states:
        state = user_states[user_id]['step']
        print(f"DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")  # ‚Üê –ò –≠–¢–£

        if state == 'waiting_target':
            await handle_target_input(update, context)
        elif state == 'waiting_description':
            await handle_description_input(update, context)
        elif state == 'waiting_key':
            await handle_key_input(update, context)
        elif state == 'waiting_key_amount':
            await handle_key_amount_input(update, context)


async def handle_skip_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_states and user_states[user_id]['step'] == 'waiting_screenshots':
        await handle_skip_screenshots(update, context)


def main():
    init_database()

    application = Application.builder().token(BOT_TOKEN).build()

    # –°–Ω–∞—á–∞–ª–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("skip", handle_skip_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.PHOTO, handle_screenshots))  # –§–æ—Ç–æ —Å–Ω–∞—á–∞–ª–∞!

    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ü–û–°–õ–ï–î–ù–ò–ú–ò
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("üî• Aegis French Fries –ó–ê–ü–£–©–ï–ù!")
    application.run_polling()


if __name__ == "__main__":
    main()